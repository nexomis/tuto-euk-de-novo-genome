---
title: "Functional Annotation"
author: Julien Fouret
format: 
  html:
    number-offset: 9
execute:
  eval: false
  echo: true
---

# Functional Annotation

In this chapter, we will perform functional annotation of the predicted proteins from our genome assembly. This process involves assigning biological functions to the proteins based on their similarity to known proteins and the presence of conserved domains. We will use two widely used tools for this purpose: InterProScan and eggNOG-mapper.

## Configuration and Setup

### Environment Variables

We will define environment variables for our sample name, the number of CPUs, and the path to the proteome file generated in the previous step (gene prediction).

``` bash
export SN=Fo47
export NCPUS=12
export proteome="$PWD/09-braker/${SN}/annot.prot.fa"
# Note: The path to the proteome file assumes it was generated by BRAKER in the previous chapter.
# Adjust the path if your file is located elsewhere.
```

### Software Dependencies

We will use Apptainer to run InterProScan and eggNOG-mapper. We will define aliases for them.

``` bash
alias interproscan_app="apptainer run docker://interpro/interproscan:5.75-106.0"
alias eggnog-mapper="apptainer run docker://quay.io/biocontainers/eggnog-mapper:2.1.13--pyhdfd78af_0"
```

## InterProScan

InterProScan is a tool that scans protein sequences against InterPro's predictive models, which are provided by its member databases. This provides a comprehensive overview of protein function by identifying protein domains and families.

More information can be found in the [InterProScan documentation](https://interproscan-docs.readthedocs.io/en/v5/HowToUseViaContainer.html).

### Download databases

First, we need to download the InterProScan data. This is a large download, so it may take some time.

``` bash
mkdir -p 10-functional-annotation/interproscan
curl -o 10-functional-annotation/interproscan/interproscan-data-5.75-106.0.tar.gz http://ftp.ebi.ac.uk/pub/software/unix/iprscan/5/5.75-106.0/alt/interproscan-data-5.75-106.0.tar.gz

tar -pxzf 10-functional-annotation/interproscan/interproscan-data-5.75-106.0.tar.gz -C 10-functional-annotation/interproscan
```

### Run InterProScan

Now we can run InterProScan on our proteome file. We will create directories for input, temporary files, and output.

``` bash
mkdir -p 10-functional-annotation/interproscan/{input,temp,output}
cp $proteome 10-functional-annotation/interproscan/input/

# We need to bind the data, input, temp, and output directories to the container.
# Note that we are using the full path to the directories.
DATADIR=$PWD/10-functional-annotation/interproscan/interproscan-5.75-106.0/data
INPUTDIR=$PWD/10-functional-annotation/interproscan/input
TEMPDIR=$PWD/10-functional-annotation/interproscan/temp
OUTPUTDIR=$PWD/10-functional-annotation/interproscan/output

# We build a full command with bind mounts instead of using the simple alias
apptainer run \
    --bind $DATADIR:/opt/interproscan/data \
    --bind $INPUTDIR:/input \
    --bind $TEMPDIR:/temp \
    --bind $OUTPUTDIR:/output \
    docker://interpro/interproscan:5.75-106.0 \
    --input /input/$(basename $proteome) \
    --output-dir /output \
    --tempdir /temp \
    --cpu $NCPUS \
    --goterms \
    --pathways
```

> To restrict the analysis to specific databases (e.g., those most relevant for fungi), you can use the `--applications` flag followed by a comma-separated list of databases (e.g., `--applications Pfam,SUPERFAMILY,CDD`).

## EggNog-mapper

eggNOG-mapper is a tool for fast functional annotation of novel sequences using precomputed orthologous groups from the eggNOG database.

More information can be found in the [eggNOG-mapper documentation](https://github.com/eggnogdb/eggnog-mapper/wiki/eggNOG-mapper-v2.1.5-to-v2.1.13).

### Download databases

We need to download the eggNOG-mapper data. We will use the `download_eggnog_data.py` script provided in the container. As requested, we will create a database specifically for Fungi to refine our analysis.

``` bash
mkdir -p 10-functional-annotation/eggnog

# Download the main eggnog databases
eggnog-mapper download_eggnog_data.py -y --data_dir 10-functional-annotation/eggnog

# Create a diamond database for Fungi.
# This will download all eggNOG proteins first if not present, then create the fungi-specific database.
eggnog-mapper create_dbs.py -m diamond --dbname fungi --taxa Fungi --data_dir 10-functional-annotation/eggnog
```

### Run eggNOG-mapper

Now we can run eggNOG-mapper on our proteome file using the custom fungi database.

``` bash
mkdir -p 10-functional-annotation/eggnog/output

# We need to bind the data directory and the input/output directories.
DATADIR=$PWD/10-functional-annotation/eggnog
INPUTFILE=$proteome
OUTPUTDIR=$PWD/10-functional-annotation/eggnog/output
OUTPUT_PREFIX=${SN}_eggnog

# We build a full command with bind mounts to ensure correct paths inside the container.
apptainer run \
    --bind $DATADIR:/data \
    --bind $(dirname $INPUTFILE):/input \
    --bind $OUTPUTDIR:/output \
    docker://quay.io/biocontainers/eggnog-mapper:2.1.13--pyhdfd78af_0 \
    emapper.py \
    -i /input/$(basename $INPUTFILE) \
    -o /output/$OUTPUT_PREFIX \
    --data_dir /data \
    --dmnd_db /data/fungi.dmnd \
    --cpu $NCPUS \
    --override
```