---
title: "Assembly evaluation with QUAST and BUSCO"
author: Julien Fouret
format: 
  html:
    number-offset: 4
execute:
  eval: false
  echo: true
---

# Assembly evaluation with QUAST and BUSCO

In this chapter, we will evaluate the quality of the assemblies generated by SPAdes and MaSuRCA using QUAST (Quality Assessment Tool for Genome Assemblies) and BUSCO (Benchmarking Universal Single-Copy Orthologs). QUAST computes a range of metrics to assess assembly contiguity, completeness, and correctness against a reference genome, while BUSCO provides a measure of gene content completeness.

## Configuration and Setup

### Environment Variables

We'll continue using the established environment variables:

``` bash
export SN=tuto482
export NCPUS=12
```

### Software Dependencies

We will use QUAST and BUSCO through Apptainer containers.

``` bash
alias quast.py="apptainer run docker://staphb/quast quast.py"
```

### Build BUSCO Sandbox

BUSCO requires write access to the container's internal storage for downloading databases and creating temporary files. Since Apptainer's default SIF format is read-only, we need to create a writable sandbox directory from the Docker image.

``` bash
apptainer build --sandbox busco_sandbox docker://ezlabgva/busco:v6.0.0_cv1
alias busco="apptainer exec --writable busco_sandbox busco"
```

## Directory Structure Setup

Create an organized directory structure for the evaluation results:

``` bash
mkdir -p 05-quast-evaluation
mkdir -p 05-busco-evaluation
```

## QUAST Evaluation

### Download Reference Genome

First, we download the reference genome for our target organism.

``` bash
wget -P 05-quast-evaluation https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/013/085/055/GCF_013085055.1_ASM1308505v1/GCF_013085055.1_ASM1308505v1_genomic.fna.gz
```

### Run QUAST

Now, we will run QUAST, providing the Illumina and Nanopore reads, all generated assemblies, and the reference genome. We will also enable fungus-specific settings.

We will use the reads from preprocessing **Option A** for this evaluation.

``` bash
quast.py \
  --fungus \
  -r 05-quast-evaluation/GCF_013085055.1_ASM1308505v1_genomic.fna.gz \
  -1 02-primary/merged/${SN}-A-illumina_R1.fastq \
  -2 02-primary/merged/${SN}-A-illumina_R2.fastq \
  --nanopore 02-primary/trimmed/${SN}-nanopore.fastq \
  -o 05-quast-evaluation \
  -t $NCPUS \
  --labels "spades_A, spades_B, masurca_A, masurca_B" \
  04-assembly/spades/option-A/scaffolds.fasta \
  04-assembly/spades/option-B/scaffolds.fasta \
  04-assembly/masurca/option-A/flye*/assembly.fasta \
  04-assembly/masurca/option-B/flye*/assembly.fasta
```

**QUAST parameters explained:**

-   `--fungus`: Enables fungus-specific settings for GeneMark.
-   `-r`: Path to the reference genome.
-   `-1/-2`: Paired-end Illumina reads.
-   `--nanopore`: Nanopore long reads.
-   `-o`: Output directory for the results.
-   `-t`: Number of CPU threads.
-   `--labels`: Human-readable names for the assemblies in the report.
-   Positional arguments: Paths to the assembly files to be evaluated.

### Understanding QUAST Metrics

> **Note on statistics:** QUAST metrics can be broadly categorized into reference-based and read-based. It is crucial to consider the evolutionary distance between your sample and the reference genome. If the reference is not closely related, what QUAST reports as a "misassembly" could in fact be a genuine structural variation between the two genomes. In such cases, you should rely more on **read-based** statistics and reference-free metrics (like BUSCO scores) to assess the quality of your assembly.

Here is a partial categorization of some key QUAST metrics:

-   **Reference-based metrics:** These metrics are calculated by comparing the assembly to a reference genome. They assess contiguity and correctness relative to the reference.
    -   `# misassemblies` (and its variants like `# local misassemblies`, `# scaffold gap misassemblies`)
    -   `# misassembled contigs`
    -   `# unaligned contigs`
    -   Genome fraction (%)
    -   Duplication ratio
    -   NGA50 / NGA75
-   **Read-based metrics:** These metrics are calculated by mapping the sequencing reads back to the assembly. They can help validate the assembly structure independently of a reference.
    -   Coverage analysis
    -   Read mapping statistics

For a complete and detailed description of all metrics, please refer to the [official QUAST manual](https://quast.sourceforge.net/docs/manual.html#sec3.1).

## BUSCO Evaluation

### Download BUSCO database

We will use the `fungi_odb10` database for our analysis.

``` bash
busco --download fungi_odb10 --download_path 05-busco-evaluation/datasets
```

### Run BUSCO

We will now run BUSCO on each of our four assemblies.

``` bash
for assembly in 04-assembly/spades/option-A/scaffolds.fasta 04-assembly/spades/option-B/scaffolds.fasta 04-assembly/masurca/option-A/flye*/assembly.fasta 04-assembly/masurca/option-B/flye*/assembly.fasta; do
  label=$(basename $(dirname $assembly))_$(basename $(dirname $(dirname $assembly)))
  busco -i $assembly -o 05-busco-evaluation/${label} --download_path 05-busco-evaluation/datasets -l fungi_odb10 -m genome -c $NCPUS --force
done
```

**BUSCO parameters explained:**

-   `-i`: Input assembly file.
-   `-o`: Output directory for the results.
-   `-l`: Lineage dataset to use.
-   `-m`: Mode of analysis (genome).
-   `-c`: Number of CPU threads.
-   `--force`: Allows overwriting of existing results.

### Understand BUSCO statistics

To understand Busco you shall understands

Marker genes are selected as those that are present in at least 90% of the species in a given lineage

## Expected Outcomes

After QUAST and BUSCO finish, the `05-quast-evaluation` and `05-busco-evaluation` directories will contain comprehensive reports with various metrics and plots comparing the quality of the different assemblies.