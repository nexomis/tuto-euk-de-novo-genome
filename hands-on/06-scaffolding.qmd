---
title: "Scaffolding with Ragout"
author: Julien Fouret
format: 
  html:
    number-offset: 5
execute:
  eval: false
  echo: true
---

# Secondary scaffolding

In this chapter, we will use Ragout to scaffold our best de novo assembly. Scaffolding is the process of ordering and orienting contigs from a draft assembly into larger structures, called scaffolds, using reference genomes. This step is crucial for improving the contiguity of the assembly and approaching a chromosome-level assembly.

We will use multiple reference genomes to guide the scaffolding process. Ragout will infer the correct order and orientation of the contigs based on synteny information from these references.

## Configuration and Setup

### Environment Variables

We'll continue using the established environment variables:

``` bash
export SN=tuto482
export NCPUS=12
```

### Software Dependencies

We will use Ragout for this chapter.

#### Apptainer

``` bash

alias ragout="apptainer run docker://ghcr.io/nexomis/ragout:build_1.0-ragout_2.3-hal_2.3-Sibelia_3.0.7 ragout"
alias mash="apptainer run docker://staphb/mash:2.3-CBIRDv2 mash"
```

#### Docker

``` bash
alias ragout="docker run --rm -u $UID:$GID -v $(pwd):$(pwd) -w $(pwd) ghcr.io/nexomis/ragout:build_1.0-ragout_2.3-hal_2.3-Sibelia_3.0.7 ragout"
```

#### Conda

``` bash
conda create -n ragout -c bioconda ragout
conda activate ragout
```

### Directory Structure Setup

Let's create an organized directory structure for our analysis:

``` bash
mkdir -p 06-scaffolding/references
mkdir -p 06-scaffolding/ragout_output
```

## Data Preparation

### Download Reference Genomes

We will download four reference genomes to be used by Ragout.

``` bash
wget -P 06-scaffolding/references https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/013/085/055/GCF_013085055.1_ASM1308505v1/GCF_013085055.1_ASM1308505v1_genomic.fna.gz
wget -P 06-scaffolding/references https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/048/165/035/GCA_048165035.1_ASM4816503v1/GCA_048165035.1_ASM4816503v1_genomic.fna.gz
wget -P 06-scaffolding/references https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/048/164/945/GCA_048164945.1_ASM4816494v1/GCA_048164945.1_ASM4816494v1_genomic.fna.gz
wget -P 06-scaffolding/references https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/030/719/095/GCA_030719095.1_ASM3071909v1/GCA_030719095.1_ASM3071909v1_genomic.fna.gz
```

Ragout requires the input fasta files to be uncompressed and renamed with simple names.

``` bash
# Decompress and rename reference files
gunzip 06-scaffolding/references/*.gz
mv 06-scaffolding/references/GCF_013085055.1_ASM1308505v1_genomic.fna 06-scaffolding/references/Fo47.fasta
mv 06-scaffolding/references/GCA_048165035.1_ASM4816503v1_genomic.fna 06-scaffolding/references/ZUM2407.fasta
mv 06-scaffolding/references/GCA_048164945.1_ASM4816494v1_genomic.fna 06-scaffolding/references/V032g.fasta
mv 06-scaffolding/references/GCA_030719095.1_ASM3071909v1_genomic.fna 06-scaffolding/references/ME23.fasta

# Rename fasta headers for Fo47 to have cleaner names (e.g., chr_I, chr_II)
sed -i -E 's/>.*chromosome ([IVX]+),.*/>chr_\1/' 06-scaffolding/references/Fo47.fasta

# cp 04-assembly/masurca/option-A/flye*/assembly.fasta 06-scaffolding/references/${SN}.fasta
# dowload from repo if necessary
wget -p hands-on/06-scaffolding/references https://raw.githubusercontent.com/nexomis/tuto-euk-de-novo-genome/refs/heads/main/hands-on/06-scaffolding/references/tuto482.fasta.gz 
gunzip 06-scaffolding/references/*.gz
```

## Building a Phylogenetic Tree, fast from genome sequences

In the following steps, we might need a tree to guide multiple-genome alignment, so let's build it.

*For larger genomes (\>100Mb), the recommended approach is to use Cactus for whole-genome alignment, which requires a phylogenetic tree as input. This section covers how to build this tree.*

**Tree requirements for Cactus:**

-   Must be in Newick format
-   Must be strictly binary (no multifurcations)
-   All leaf nodes must correspond to genome names
-   Branch lengths are ignored

### Option 1: Fully automated with JolyTree

#### Create Local Conda Environment for JolyTree

Since the JolyTree container is missing dependencies, we'll create a local conda environment:

``` bash
# Create local conda environment in hands-on/venv
conda create -p venv -c bioconda -c conda-forge jolytree bc
```

#### Build a tree with JolyTree

Before creating the Cactus sequence file, we'll use JolyTree to generate an accurate phylogenetic tree from our reference genomes and target assembly. JolyTree is a fast alignment-free tool that can infer distance-based phylogenetic trees from genome assemblies.

``` bash
# Run JolyTree to generate phylogenetic tree
conda activate ./venv
JolyTree.sh -i 06-scaffolding/references -b 06-scaffolding/jolytree -t $NCPUS
conda deactivate
```

**JolyTree parameters explained:**

-   `-i`: Directory containing FASTA files (all genomes)
-   `-b`: Basename for output files
-   `-t`: Number of threads to use

The generated tree file `06-scaffolding/jolytree.nwk` will contain the inferred phylogenetic relationships between all genomes.

**Note on Alternative Tree Construction Methods:**

JolyTree uses a sound methodology (Mash for distance estimation followed by tree construction algorithms), but its implementation lacks robustness and reproducibility. For more rigorous phylogenetic analysis, you can manually construct pairwise distance matrices based on k-mer frequencies using tools like:

-   **KAT**: Can generate k-mer frequency histograms and compare k-mer profiles between genomes
-   **Mash**: Estimates genome-to-genome distances using MinHash sketches of k-mer sets

These distance matrices can then be used with phylogenetic reconstruction methods such as:

-   **UPGMA** (Unweighted Pair Group Method with Arithmetic Mean)
-   **Neighbor-joining**

This manual approach provides better control over parameters and more reproducible results, especially for closely related genomes or when branch length accuracy is important for downstream analyses.

#### Manual Tree Editing for Cactus Compatibility

**Important**: The JolyTree output may need manual editing to be compatible with Cactus requirements:

1.  **Remove branch lengths**: Cactus can work without branch lengths.
2.  **Convert multifurcations to binary tree**: Cactus requires strictly binary trees (each internal node has exactly 2 children). If JolyTree produces any 3-way or higher splits, these need to be resolved into binary splits.

To edit the tree `06-scaffolding/jolytree.nwk` manually:

``` bash
(tuto482:0.1,Fo47:0.2,(ZUM2407:0.05,V032g:0.03,ME23:0.08):0.15);
```

into

``` bash
((tuto482,Fo47),((ZUM2407,V032g),ME23));
```

### Option 2: Step-by-step with Mash and Python

Here, we provide a code snippet to build a phylogenetic tree using `mash` for distance calculation and a Python script for UPGMA tree construction. This approach offers more transparency and control over the tree-building process.

First, run `mash` to compute the distance matrix and save it to a file:

``` bash
mash sketch -k 32 -s 100000 -o 06-scaffolding/references/sketch.msh 06-scaffolding/references/*fasta
mash dist -s 100000 06-scaffolding/references/sketch.msh 06-scaffolding/references/*fasta > 06-scaffolding/mash_dist.tsv
```

Next, use the following Python script to build the UPGMA tree and save it in Newick format. This script requires `numpy`, `pandas`, and `scipy`. You may need to install them: `pip install numpy pandas scipy`.

``` python
#!/usr/bin/env python
import pandas as pd
import numpy as np
from scipy.cluster.hierarchy import linkage, to_tree
from scipy.spatial.distance import squareform
import os

def get_newick(node, newick, parent_dist, leaf_names):
    """
    Convert a SciPy linkage matrix to a Newick format string.
    """
    if node.is_leaf():
        return "%s:%.4f%s" % (leaf_names[node.id], parent_dist - node.dist, newick)
    else:
        if len(newick) > 0:
            newick = ")%s" % newick
        else:
            newick = ");"
        dist = parent_dist - node.dist
        if dist < 0:
            dist = 0
        newick = get_newick(node.get_left(), ",%s" % get_newick(node.get_right(), "", node.dist, leaf_names), node.dist, leaf_names) + newick
        newick = "(%s:%.4f" % (newick, dist)
        return newick

# Read the distance matrix
dist_df = pd.read_csv('06-scaffolding/mash_dist.tsv', sep='\t', header=None, names=['ref1', 'ref2', 'dist', 'pvalue', 'kmers'])

# Pivot to create a square distance matrix
dist_pivot = dist_df.pivot(index='ref1', columns='ref2', values='dist').fillna(0)
labels = [os.path.basename(name).replace('.fasta', '') for name in dist_pivot.index]
dist_pivot.index = labels
dist_pivot.columns = labels

# Ensure the matrix is symmetric and convert to condensed format
dist_matrix = dist_pivot.values
dist_matrix = (dist_matrix + dist_matrix.T) / 2
np.fill_diagonal(dist_matrix, 0)
condensed_dist = squareform(dist_matrix)

# Perform UPGMA clustering
Z = linkage(condensed_dist, 'average')

# Convert to Newick format
tree = to_tree(Z)
newick_tree = get_newick(tree, "", tree.dist, labels)

# Save the tree to a file
with open('06-scaffolding/mash.nwk', 'w') as f:
    f.write(newick_tree)

print("Newick tree saved to 06-scaffolding/mash.nwk")
print(newick_tree)
```

## Phylogenetic scaffolding

Now that we have our data prepared and, if needed, a phylogenetic tree, we can proceed with scaffolding. We present two methods.

### Ragout with Sibelia (not recommended)

The default method in Ragout uses Sibelia for synteny block decomposition. While effective for small genomes (e.g., bacterial), this can be very slow and memory-intensive for larger, more complex genomes.

#### Prepare Ragout Recipe File

Ragout uses a recipe file to specify the input genomes and parameters. We will create one for our analysis. We will use the best assembly from the previous step (`04-assembly/masurca/option-A/flye*/assembly.fasta`) as the target assembly.

``` bash

# Create the recipe file
cat > 06-scaffolding/ragout_recipe.rcp << EOF
.references = Fo47,ZUM2407,V032g,ME23
.target = ${SN}
.naming_ref = Fo47

Fo47.fasta = ${PWD}/06-scaffolding/references/Fo47.fasta
ZUM2407.fasta = ${PWD}/06-scaffolding/references/ZUM2407.fasta
V032g.fasta = ${PWD}/06-scaffolding/references/V032g.fasta 
ME23.fasta = ${PWD}/06-scaffolding/references/ME23.fasta
${SN}.fasta = ${PWD}/06-scaffolding/references/${SN}.fasta
EOF
```

#### Run Ragout with Sibelia

**Use this method only for small genomes or for quick, preliminary analysis.**

``` bash
ragout 06-scaffolding/ragout_recipe.rcp \
  -o 06-scaffolding/ragout_output \
  --refine \
  --solid-scaffolds \
  -t $NCPUS
```

### Ragout with Cactus/MAF (Recommended)

For larger genomes (\>100Mb) or when higher accuracy is desired, the recommended workflow is to use Cactus to create a HAL (Hierarchical Alignment) file, which is then converted to MAF format for Ragout. This approach is generally faster and more robust for complex genomes.

#### Software Dependencies for Cactus

##### Apptainer

``` bash
alias cactus="apptainer run docker://quay.io/comparative-genomics-toolkit/cactus:v2.9.9 cactus"
```

##### Docker

``` bash
alias cactus="docker run --rm -u $UID:$GID -v $(pwd):$(pwd) -w $(pwd) quay.io/comparative-genomics-toolkit/cactus:v2.9.9 cactus"
```

#### Create Cactus Sequence File

Now we'll create a sequence file for Cactus using the phylogenetic tree we generated earlier:

``` bash
# Create directory for Cactus workflow
mkdir -p 06-scaffolding/cactus

cat > 06-scaffolding/cactus/genomes.txt << EOF
# Phylogenetic tree (use the one from JolyTree or Mash)
((ME23,(ZUM2407,(V032g,Fo47))),tuto482);

# Genome paths (must be absolute paths)
${SN} ${PWD}/06-scaffolding/references/${SN}.fasta
Fo47 ${PWD}/06-scaffolding/references/Fo47.fasta
ZUM2407 ${PWD}/06-scaffolding/references/ZUM2407.fasta
V032g ${PWD}/06-scaffolding/references/V032g.fasta
ME23 ${PWD}/06-scaffolding/references/ME23.fasta
EOF
```

#### Run Cactus to Generate HAL Alignment

``` bash
# Run Cactus to create HAL alignment
cactus 06-scaffolding/cactus/js \
  06-scaffolding/cactus/genomes.txt \
  06-scaffolding/cactus/alignment.hal \
  --maxCores $NCPUS
```

**Cactus parameters explained:**

-   `js`: Job store directory for intermediate files
-   `genomes.txt`: Sequence file with tree and genome paths
-   `alignment.hal`: Output HAL alignment file
-   `--maxCores`: Maximum number of CPU cores to use

#### Convert HAL to MAF Format

After generating the HAL alignment, we need to convert it to MAF format for use with Ragout:

``` bash
# Set up cactus-hal2maf alias
alias cactus-hal2maf="apptainer run docker://quay.io/comparative-genomics-toolkit/cactus:v2.9.9 cactus-hal2maf"

# Convert HAL to MAF format
cactus-hal2maf 06-scaffolding/cactus/js-hal2maf \
  06-scaffolding/cactus/alignment.hal \
  06-scaffolding/cactus/alignment.maf \
  --refGenome Fo47 \
  --filterGapCausingDupes \
  --noAncestors \
  --dupeMode single \
  --chunkSize 500000
```

**cactus-hal2maf parameters explained:**

-   `--refGenome`: Reference genome for MAF projection (Fo47 for consistent chromosome naming)
-   `--chunkSize`: Size of chunks for parallel processing

#### Create Ragout Recipe for MAF Method

Now create a recipe file that uses the MAF alignment:

``` bash
# Create MAF-based recipe file
cat > 06-scaffolding/ragout_maf_recipe.rcp << EOF
.references = Fo47,ZUM2407,V032g,ME23
.target = ${SN}
.naming_ref = Fo47
.maf = ${PWD}/06-scaffolding/cactus/alignment.maf

# Individual FASTA paths are required for MAF backend
Fo47.fasta = ${PWD}/06-scaffolding/references/Fo47.fasta
ZUM2407.fasta = ${PWD}/06-scaffolding/references/ZUM2407.fasta
V032g.fasta = ${PWD}/06-scaffolding/references/V032g.fasta
ME23.fasta = ${PWD}/06-scaffolding/references/ME23.fasta
${SN}.fasta = ${PWD}/06-scaffolding/references/${SN}.fasta
EOF
```

#### Run Ragout with MAF Alignment

``` bash
ragout 06-scaffolding/ragout_maf_recipe.rcp \
  -o 06-scaffolding/ragout_maf_output \
  --solid-scaffolds \
  -s maf \
  -t $NCPUS
```

**MAF method parameters:**

-   `-s maf`: Specifies MAF as the synteny backend
-   Individual FASTA paths must be provided alongside the MAF file

### Method Comparison

| Method | Processing Time | Genome Size Suitability | Memory Usage |
|------------------|------------------|-------------------|------------------|
| **Sibelia** | Slower | \<100Mb (bacterial, small eukaryotes) | Moderate |
| **Cactus/MAF** | Faster | \>100Mb (large eukaryotes) | Higher initial, but more efficient overall |

**Recommendations:**

-   Use **Sibelia method** (not recommended) for bacterial genomes or small eukaryotic genomes.
-   Use **Cactus/MAF method** (recommended) for large eukaryotic genomes or when faster processing is needed.

## RNA-Seq Based Scaffolding with Agouti

(This part will be seen after annotation tutorial)

## Expected Outcomes

After Ragout finishes, the output directory will contain the scaffolded assembly. The main output files are:

### For Sibelia Method (`06-scaffolding/ragout_output/`):

-   `${SN}_scaffolds.fasta`: The final scaffolded assembly
-   `${SN}_unplaced.fasta`: Input contigs that could not be placed in the scaffolds
-   `${SN}_scaffolds.agp`: The structure of the scaffolds in AGP format

### For Cactus/MAF Method (`06-scaffolding/ragout_maf_output/`):

-   `${SN}_scaffolds.fasta`: The final scaffolded assembly
-   `${SN}_unplaced.fasta`: Input contigs that could not be placed in the scaffolds
-   `${SN}_scaffolds.agp`: The structure of the scaffolds in AGP format

### Additional Cactus Outputs (`06-scaffolding/cactus/`):

-   `alignment.hal`: Multiple genome alignment in HAL format
-   `alignment.maf`: Multiple genome alignment in HAL format

## Quality !?

You can then proceed to evaluate the quality of the new scaffolded assembly using QUAST and BUSCO, as described in the previous chapter. Compare the results from both methods to determine which approach works best for your specific dataset.
